#BlueJ class context
comment0.target=SeatManager
comment0.text=\r\n\ Gestiona\ los\ asientos\ del\ avi\u00F3n\r\n\ \r\n\ @author\ ip-profes\r\n\ @version\ 14-11-23\r\n
comment1.params=first\ standard
comment1.target=SeatManager(int,\ int)
comment1.text=\r\n\ Constructor\ del\ SeatManager\r\n\ Asigna\ atributos\ a\ firstRows\ y\ standardRows\ que\ recibe\ como\ par\u00E1metro\r\n\ Crea\ una\ matriz\ con\ first+standard\ filas\ y\ SEATS_FOR_ROW\ columnas\r\n\ @param\ first\ filas\ en\ primera\r\n\ @param\ standard,\ filas\ en\ clase\ turista\r\n
comment10.params=
comment10.target=Person[][]\ getSeats()
comment10.text=\r\n\ Devuelve\ una\ copia\ de\ la\ matriz\ de\ asientos\r\n
comment11.params=condition\ msg
comment11.target=void\ checkParam(boolean,\ java.lang.String)
comment11.text=\r\n\ Si\ no\ se\ cumple\ la\ condici\u00F3n\ se\ lanza\ IllegalArgumentException\ con\ mensaje\ recibido\r\n\ @param\ condici\u00F3n\r\n\ @param\ mensaje\r\n
comment12.params=
comment12.target=int\ numberOfAloneChildren()
comment12.text=\r\n\ Checks\ for\ alone\ children\ on\ the\ plane.\r\n\ \r\n\ @return\ The\ number\ of\ alone\ children.\r\n
comment13.params=i\ j
comment13.target=boolean\ isChildAlone(int,\ int)
comment13.text=\r\n\ Checks\ if\ a\ child\ has\ an\ adult\ on\ the\ left\ or\ on\ the\ rigth.\r\n\ \r\n\ @param\ i\ The\ row.\r\n\ @param\ j\ The\ column.\r\n\ \r\n\ @return\ If\ it\ is\ Alone\ returns\ true.\ Otherwise,\ false.\r\n
comment14.params=list
comment14.target=int\ bookSeat(java.util.ArrayList)
comment14.text=\r\n\ Attempts\ to\ seat\ all\ passengers\ from\ the\ list\ in\ available\ seats.\r\n\ \r\n\ @param\ list\ The\ list\ of\ people\ that\ try\ to\ book\ the\ plane.\r\n\ \r\n\ @return\ The\ number\ of\ succesfull\ people\ that\ entered\ in\ the\ plane.\r\n
comment15.params=
comment15.target=java.util.ArrayList[]\ getPassengersByAge()
comment15.text=\r\n\ Returns\ an\ array\ containing\ 1\ arrayList\ for\ every\ age.\ The\ ArrayList\ will\ contain\ every\ person\ of\ the\ plane\ with\ the\ corresponding\ age.\r\n\ \r\n\ @return\ An\ array\ of\ ArrayLists\ of\ people\ of\ the\ same\ age.\r\n
comment2.params=rows
comment2.target=void\ setFirstRows(int)
comment2.text=\r\n\ Asigna\ valor\ al\ atributo\ rows\r\n\ @param\ rows,\ nuevo\ valor\ para\ rows\ entre\ MIN_FIRST_ROWS\ y\ MAX_FIRST_ROWS\r\n
comment3.params=rows
comment3.target=void\ setStandardRows(int)
comment3.text=\r\n\ Asigna\ valor\ al\ atributo\ standardRows\r\n\ @param\ rows,\ nuevo\ valor\ para\ standarRows,\ entre\ MIN_STANDARD_ROWS\ y\ MAX_STANDARD_ROWS\r\n
comment4.params=seats
comment4.target=void\ setSeats(Person[][])
comment4.text=\r\n\ Asigna\ valor\ a\ la\ matriz\ de\ asientos\r\n\ @param\ seats,\ matriz\ de\ dos\ dimensiones\ de\ objetos\ tipo\ Person\r\n
comment5.params=
comment5.target=int\ getFirstRows()
comment5.text=\r\n\ @return\ n\u00FAmero\ de\ filas\ en\ primera\r\n
comment6.params=
comment6.target=int\ getStandardRows()
comment6.text=\r\n\ @return\ n\u00FAmero\ de\ filas\ en\ turista\r\n
comment7.params=person\ row\ column
comment7.target=boolean\ bookSeat(Person,\ int,\ int)
comment7.text=\r\n\ asigna\ un\ asiento\ para\ la\ persona\ recibida,\ en\ fila\ y\ columna\ recibida,\ \r\n\ siempre\ que\ el\ asiento\ est\u00E9\ libre\r\n\ @param\ person\ que\ quiere\ reservar\r\n\ @param\ row,\ fila\r\n\ @param\ column\ columna\r\n\ @return\ true\ si\ ha\ podido\ sentar\ a\ la\ persona\r\n
comment8.params=row\ column
comment8.target=Person\ release(int,\ int)
comment8.text=\r\n\ Libera\ un\ asiento\ cuya\ fila\ y\ columna\ se\ reciben\r\n\ @param\ row\r\n\ @param\ column\r\n\ @return\ la\ persona\ liberada\ o\ null\ si\ no\ hab\u00EDa\ ninguna\r\n
comment9.params=row\ column
comment9.target=Person\ getSeat(int,\ int)
comment9.text=\r\n\ @param\ row\r\n\ @param\ column\r\n\ @return\ persona\ localizada\ en\ posici\u00F3n\ row,\ column\r\n
numComments=16
