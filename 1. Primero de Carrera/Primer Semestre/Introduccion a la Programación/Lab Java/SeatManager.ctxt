#BlueJ class context
comment0.target=SeatManager
comment0.text=\r\n\ Write\ a\ description\ of\ class\ SeatManager\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=firstClassRows\ standardClassRows
comment1.target=SeatManager(int,\ int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ SeatManager\r\n
comment10.params=
comment10.target=int\ getNumPax()
comment10.text=\r\n\ Counts\ all\ the\ people\ on\ each\ row\ of\ the\ plane\ and\ adds\ all\ them.\r\n\ \r\n\ @return\ The\ number\ of\ people\ in\ the\ plane.\r\n
comment11.params=paxNumber
comment11.target=void\ loadPax(int)
comment11.text=\r\n\ Adds\ people\ to\ the\ plane\ by\ a\ given\ param.\r\n\ \r\n\ @param\ paxNumber\ The\ number\ of\ people\ that\ you\ want\ to\ add\ to\ the\ plane.\r\n
comment12.params=
comment12.target=void\ printManifest()
comment12.text=\r\n\ Prints\ the\ data\ of\ all\ the\ people\ on\ the\ plane.\r\n
comment13.params=
comment13.target=void\ print()
comment13.text=\r\n\ Represents\ in\ a\ visual\ way\ the\ seats\ of\ the\ plane.\r\n
comment14.params=
comment14.target=int\ getYoungestAgeOnBoard()
comment14.text=\r\n\ Searches\ for\ the\ lowest\ age\ of\ the\ people\ in\ the\ plane.\r\n\ \r\n\ @return\ The\ age\ of\ the\ youngest\ person\ in\ the\ plane.\r\n
comment15.params=
comment15.target=java.util.ArrayList\ getYoungestPeopleOnBoard()
comment15.text=\r\n\ Searches\ for\ the\ people\ with\ the\ lowest\ age\ in\ the\ plane.\r\n\ \r\n\ @return\ An\ ArrayList<Person>\ with\ the\ people\ that\ have\ the\ lowest\ age.\r\n
comment16.params=area
comment16.target=int\ getNumPax(byte)
comment16.text=\r\n\ OPTIONAL\:\r\n\ Counts\ all\ the\ people\ on\ a\ part\ of\ the\ plane\ and\ adds\ all\ them.\r\n\ \r\n\ @param\ area\ It\ can\ be\:\ FIRST_CLASS\ /\ STANDARD_CLASS\ /\ ALL_CLASSES\ depending\ on\ which\ one\ is\ chosen\ it\ selects\ different\ rows.\r\n\ \r\n\ @return\ The\ number\ of\ people\ in\ the\ specified\ class.\r\n
comment17.params=area\ section
comment17.target=int\ getNumPax(byte,\ byte)
comment17.text=\r\n\ OPTIONAL\:\r\n\ Counts\ all\ the\ people\ on\ a\ part\ of\ the\ plane\ and\ adds\ all\ them.\r\n\ \r\n\ @param\ area\ It\ can\ be\:\ FIRST_CLASS\ /\ STANDARD_CLASS\ /\ ALL_CLASSES\ depending\ on\ which\ one\ is\ chosen\ it\ selects\ different\ rows.\r\n\ @param\ section\ It\ can\ be\:\ BOARD_WINDOW\ /\ LEFT_AISLE\ /\ RIGHT_AISLE\ /\ STARBOARD_WINDOW\ /\ BOTH_WINDOWS\ /\ BOTH_AISLES\ /\ EVERYWHERE\ depending\ on\ which\ is\ chosen\ it\ selects\ different\ columns.\r\n\ \r\n\ @return\ The\ number\ of\ people\ in\ the\ specified\ class.\r\n
comment18.params=gender
comment18.target=int\ countFirstClassElderyPax(boolean)
comment18.text=\r\n\ OPTIONAL\:\r\n\ Counts\ the\ number\ of\ passengers\ in\ the\ first\ class\ (by\ gender)\ whose\ age\ is\ over\ 65.\r\n\ \r\n\ @param\ gender\ The\ gender\ you\ want\ to\ count.\r\n\ \r\n\ @return\ The\ number\ of\ people\ in\ the\ specified\ class\ with\ the\ specified\ conditions.\r\n
comment19.params=colA\ colB
comment19.target=void\ interchangeSeats(int,\ int)
comment19.text=\r\n\ OPTIONAL\:\r\n\ Interchanges\ seats\ by\ columns.\r\n\ \r\n\ @param\ colA\ Column\ A.\r\n\ @param\ colB\ Column\ B.\r\n
comment2.params=
comment2.target=int\ getSize()
comment2.text=\r\n\ Calculates\ the\ max\ capacity\ of\ people\ that\ can\ enter\ on\ the\ plane.\r\n\ \r\n\ @return\ Number\ of\ seats\ on\ the\ plane.\r\n
comment3.params=
comment3.target=int\ getSizeFirstClass()
comment3.text=\r\n\ Calculates\ the\ max\ capacity\ of\ people\ that\ can\ enter\ on\ the\ first\ class.\r\n\ \r\n\ @return\ Number\ of\ seats\ on\ the\ firstClass.\r\n
comment4.params=
comment4.target=int\ getSizeStandardClass()
comment4.text=\r\n\ Calculates\ the\ max\ capacity\ of\ people\ that\ can\ enter\ on\ the\ standard\ class.\r\n\ \r\n\ @return\ Number\ of\ seats\ on\ the\ Standard\ Class.\r\n
comment5.params=row\ col
comment5.target=void\ validateCoords(int,\ int)
comment5.text=\r\n\ Checks\ if\ the\ coords\ are\ right.\ Otherwise\ gives\ the\ corresponding\ error.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ seat.\r\n\ @param\ column\ The\ column\ of\ the\ seat.\r\n
comment6.params=person\ row\ col
comment6.target=void\ bookSeat(Person,\ int,\ int)
comment6.text=\r\n\ Checks\ if\ a\ seat\ is\ empty\ and\ replaces,\ if\ so,\ it\ add\ the\ person\ to\ that\ seat.\r\n\ \r\n\ @param\ person\ The\ person\ that\ will\ be\ on\ that\ seat.\r\n\ @param\ row\ The\ row\ of\ the\ seat.\r\n\ @param\ column\ The\ column\ of\ the\ seat.\r\n
comment7.params=row\ col
comment7.target=boolean\ isReserved(int,\ int)
comment7.text=\r\n\ Checks\ if\ a\ seat\ is\ reserved.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ seat.\r\n\ @param\ column\ The\ column\ of\ the\ seat.\r\n\ \r\n\ @return\ The\ anwer\ to\ is\ reserved.\r\n
comment8.params=row\ col
comment8.target=Person\ getReservation(int,\ int)
comment8.text=\r\n\ Gives\ the\ person\ of\ a\ seat.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ seat.\r\n\ @param\ column\ The\ column\ of\ the\ seat.\r\n\ \r\n\ @return\ The\ adress\ of\ the\ person.\r\n
comment9.params=row\ col
comment9.target=void\ releaseSeat(int,\ int)
comment9.text=\r\n\ Clears\ a\ seat.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ seat.\r\n\ @param\ column\ The\ column\ of\ the\ seat.\r\n
numComments=20
